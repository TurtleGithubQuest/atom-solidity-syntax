'scopeName': 'source.solidity'
'name': 'Solidity'
'fileTypes': [
  "sol"
  "solidity"
]
'patterns': [
  {
    captures:
      "2":
        name: "support.function"
    comment: "Events"
    match: "\\b(event|enum)\\s+([A-Za-z_][A-Za-z0-9_]*)\\b"
    name: "keyword.control"
  }
  {
    begin: "(?=(contract|library|using|struct|function|modifier)\\s+)"
    end: '((?=#)|(?=//)|(?=\n)|(?=\\()|(?={))'
    comment: "Main keywords"
    patterns: [
      {
        captures:
          "1":
            name: "constant.language"
        match: "\\b(contract|library|using|struct|function|modifier)\\b"
      }
      {
        captures:
          "1":
            name: "entity.name.function"
          "2":
            name: "keyword.control"
          "3":
            name: "entity.name.function"
        match: "([A-Za-z_][A-Za-z0-9_]*)(?:\\s+(?:(is)|,)\\s+([A-Za-z_][A-Za-z0-9_]*))?"
      }
    ]
  }
  {
    include: "#builtin_types"
  }
  {
    begin: "(?=(mapping)\\s*)"
    end: '((?=;)|(?=\n))'
    comment: "Mapping definitions"
    patterns: [
      {
        captures:
          "1":
            name: "keyword.control"
        match: "\\b(mapping)\\b"
      }
      {
        include: "#builtin_types"
      }
      {
        captures:
          "1":
            name: "keyword.control"
        match: "\\b(private|public|internal|external|inherited)\\b"
      }
    ]
  }
  {
    comment: "True and false keywords"
    match: "\\b(true|false)\\b"
    name: "constant.language"
  }
  {
    comment: "Bytes calldata and memory"
    match: "\\b(calldata|memory)\\b"
    name: "storage.modifier"
  }
  {
    match: "\\b(returns?|\\_)\\b"
    name: "dark-green"
  }
  {
    match: "\\b(private|public|view|internal|payable|external|\\_)\\b"
    name: "light-green"
  }
  {
    match: "\\b(this|super|\\_)\\b"
    name: "dark-blue"
  }
  {
    match: "\\b(if|else|\\_)\\b"
    name: "dark-yellow"
  }
  {
    match: "\\b(override|\\_)\\b"
    name: "grey"
  }
  {
    match: "\\b(constructor|receive|fallback|\\_)\\b"
    name: "light-purple"
  }
  {
    comment: "Danger keywords"
    match: "\\b(for|while|delete|for|break|continue|throw|do|break|selfdestruct|\\_)\\b"
    name: "danger"
  }
  {
    comment: "Bytes keyword"
    match: "\\b(abi|bytes\\d*|\\_)\\b"
    name: "bytes"
  }
  {
    captures:
      "1":
        name: "constant.language"
      "2":
        name: "keyword.control"
    comment: "Variable definitions"
    match: "\\b([A-Za-z_][A-Za-z0-9_]+)(\\s+(?:private|public|internal|external|inherited))?\\s+([A-Za-z_][A-Za-z0-9_]*)\\;"
  }
  {
    comment: "Operators"
    match: "(=|!|>|<|\\||&|-\\=|\\+\\=)"
    name: "keyword.control"
  }
  {
    captures:
      "1":
        name: "bytes"
      "2":
        name: "constant.language"
    comment: "msg and block special usage"
    match: "\\b(msg|block|tx)\\.([A-Za-z_][A-Za-z0-9_]*)\\b"
  }
  {
    captures:
      "1":
        name: "support.type"
    comment: "Function call"
    match: "\\b([A-Za-z_][A-Za-z0-9_]*)\\s*\\("
  }
  {
    comment: "Strings"
    match: "([\\\"\\'].*?[\\\"\\'])"
    name: "quoted"
  }
  {
    comment: "Numbers"
    match: "\\b(\\d+)\\b"
    name: "numeric"
  }
  {
    comment: "Hexadecimal"
    match: "\\b(0[xX][a-fA-F0-9]+)\\b"
    name: "hexadecimal"
  }
  {
    comment: "Comments"
    match: "\\/\\/.*"
    name: "comment"
  }
  {
    begin: "(\\/\\*)"
    comment: "Multiline comments"
    end: "(\\*\\/)"
    name: "comment"
  }
]
'repository':
  'builtin_types':
    captures:
      "1":
        name: "constant.language"
      "2":
        name: "none"
    comment: "Built-in types"
    match: "\\b(address|string\\d*|int\\d*|uint\\d*|var|import|constant|inherited|is|bool|new|function|suicide|hash\\d*)\\b(?:\\s+(?:indexed\\s+)?([A-Za-z_][A-Za-z0-9_]*)\\s*[,\\)])?"
